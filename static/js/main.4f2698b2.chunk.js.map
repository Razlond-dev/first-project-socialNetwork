{"version":3,"sources":["utils/validation/validators.ts","components/common/preloader/preloader.tsx","components/common/FormControls/formControls.tsx","api/profileAPI.ts","redux/Profile_reducer.ts","redux/Dialogs_reducer.ts","assets/images/userPhoto.png","components/common/FormControls/formControls.module.css","api/api.ts","serviceWorker.js","components/Settings/Settings.jsx","components/News/News.jsx","components/Music/Music.jsx","api/securityAPI.ts","api/authAPI.ts","redux/Auth_reducer.ts","components/login/login.tsx","redux/App_reducer.ts","redux/Sidebar_reducer.ts","api/usersAPI.ts","redux/Users_reducer.ts","redux/redux-store.ts","components/Users/User.tsx","redux/Users_selectors.ts","components/Users/UserSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","redux/Auth_selectors.ts","components/Header/Header.tsx","assets/images/logo.png","App.tsx","index.tsx"],"names":["required","value","Preloader","className","size","formControl","Element","input","meta","props","hasError","touched","error","styles","profileAPI","userId","instance","get","then","response","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","posts","id","message","likesCount","newPostText","actions","addPostCreator","newPost","type","setUserProfile","setUserStatus","deletePost","savePhotoSuccess","photos","updateNewPostTextCreator","text","newText","showProfileThunkCreator","dispatch","a","getUserStatus","updateUserStatus","resultCode","console","log","savePhoto","file","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","filter","p","dialogs","name","avatarURL","addMessageCreator","newMessageText","dialogsReducer","module","exports","ResultCodeEnum","ResultCodeForCaptchaEnum","Axios","create","withCredentials","baseURL","Boolean","window","location","hostname","match","Settings","News","Music","securityAPI","authAPI","email","password","rememberMe","captcha","post","delete","login","isAuth","captchaUrl","url","authMeThunkCreator","Success","getCaptchaUrl","authReducer","Input","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","validate","src","LoginPage","useDispatch","useSelector","to","CaptchaIsRequired","length","initialised","appReducer","friends","sidebarReducer","usersAPI","getUsers","currentPage","pageSize","term","friend","unfollow","follow","users","totalUsersCount","isFetching","followinInProgress","payload","totalCount","count","items","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","map","u","followed","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersPage","formReducer","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","User","user","style","width","display","justifyContent","textAlign","padding","height","borderRadius","small","userPhoto","alt","disabled","followingInProgress","some","onClick","marginTop","color","getUsersSel","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","userSearchFormValidate","values","UsersSearchForm","React","memo","enableReinitialize","initialValues","String","setSubmitting","onFilterChanged","isSubmitting","flexDirection","title","margin","as","SearchOutlined","Users","history","useHistory","useEffect","parsed","queryString","parse","search","actualPage","actualFilter","page","Number","push","pathname","followUser","bind","unfollowUser","showQuickJumper","defaultCurrent","total","onChange","key","UsersPage","SelectIsAuth","SelectCurrentUserLogin","Header","Layout","span","backgroundColor","icon","UserOutlined","marginLeft","marginRight","target","href","Content","Footer","Sider","DialogsContainer","lazy","ProfileContainer","App","this","initialiseApp","addEventListener","e","removeEventListener","breakpoint","collapsedWidth","onBreakpoint","broken","onCollapse","collapsed","theme","mode","defaultSelectedKeys","Item","activeClassName","objectFit","logo","MessageOutlined","UploadOutlined","minHeight","fallback","exact","path","render","pageTitle","Component","AppContainer","withRouter","connect","dispatchResult","all","MainApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.4f2698b2.chunk.js","sourcesContent":["export type fieldValidatoryType = (value: string) => string | undefined \r\n\r\nexport const required: fieldValidatoryType = (value) => {\r\n  if (value) {\r\n    return undefined\r\n  }\r\n  return 'Field is required'\r\n}\r\n\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number): fieldValidatoryType => (value) => {\r\n  if (value && value.length > maxLength) {\r\n    return `Max length is ${maxLength} symbols`\r\n  }\r\n  return undefined\r\n}","import React from 'react'\r\n\r\nimport { Spin } from 'antd';\r\n\r\n\r\n\r\nlet Preloader: React.FC = () => {\r\n\r\n  return <div className=\"preloader\">\r\n    <Spin size=\"large\" />\r\n  </div>\r\n}\r\n\r\n\r\nexport default Preloader","import React from 'react';\r\nimport styles from './formControls.module.css';\r\n\r\n\r\ntype formControlType = (params: string) => React.ReactNode\r\n\r\nexport const formControl: formControlType = Element => ({ input, meta, ...props }) => {\r\n  const hasError = meta.touched && meta.error\r\n\r\n  return (\r\n    <div className={hasError ? styles.error : ''}>\r\n      <Element {...input} {...props} />\r\n      {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n  )\r\n}\r\n","import { PhotosType, profileType } from \"../types/types\";\r\nimport { instance, APIResponseType } from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n  photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n  showProfile(userId: number) {\r\n    return instance.get<profileType>(`profile/` + userId).then(response => response.data);\r\n  },\r\n  getStatus(userId: number) {\r\n    return instance.get<string>(`profile/status/` + userId).then(response => response.data);\r\n  },\r\n  updateStatus(status: string) {\r\n    return instance.put<APIResponseType>(`profile/status`, { status: status }).then(response => response.data);\r\n  },\r\n  savePhoto(photoFile: File) {\r\n    const formData = new FormData();\r\n    formData.append('avatar', photoFile);\r\n    return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    }).then(response => response.data);\r\n  },\r\n  saveProfile(profile: profileType) {\r\n    return instance.put<APIResponseType>(`profile`, profile).then(response => response.data);\r\n  }\r\n};\r\n","import { Action } from \"redux\"\r\nimport { ActionTypes, FormAction, stopSubmit } from \"redux-form\"\r\nimport { profileAPI } from \"../api/profileAPI\"\r\nimport { PhotosType, postType, profileType, contactsType } from \"../types/types\"\r\nimport { BaseThunkType, inferActionsTypes } from \"./redux-store\"\r\n\r\nlet initialState = {\r\n  posts: [\r\n    { id: 1, message: 'Hey, how are you?', likesCount: 9 },\r\n    { id: 2, message: 'You are the best!', likesCount: 140 },\r\n    { id: 3, message: \"Right now, adding posts to the specific profile aren't available yet and the current posts are hardcoded :(\", likesCount: 1 },\r\n  ] as Array<postType>,\r\n  newPostText: '',\r\n  profile: null as profileType | null,\r\n  status: ''\r\n}\r\n\r\n\r\nconst profileReducer = (state = initialState, action: any): initialStateType => {\r\n\r\n\r\n  switch (action.type) {\r\n    case 'ADD-POST':\r\n\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, { id: 5, message: action.newPost, likesCount: 0 }],\r\n        newPostText: ''\r\n      }\r\n\r\n    case 'UPDATE-NEW-POST-TEXT': {\r\n      return {\r\n        ...state,\r\n        newPostText: action.newText\r\n      }\r\n    }\r\n    case 'SET_USER_PROFILE': {\r\n      return {\r\n        ...state,\r\n        profile: action.profile\r\n      }\r\n    }\r\n    case 'SET_USER_STATUS': {\r\n      return {\r\n        ...state,\r\n        status: action.status\r\n      }\r\n    }\r\n    case 'DELETE_POST': {\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts.filter(p => p.id != action.id)]\r\n      }\r\n    }\r\n    case 'SAVE_PHOTO_SUCCESS': {\r\n      return { ...state, profile: { ...state.profile, photos: action.photos } as profileType }\r\n\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const actions = {\r\n  addPostCreator: (newPost: string) => ({ type: 'ADD-POST', newPost } as const),\r\n  setUserProfile: (profile: profileType) => ({ type: 'SET_USER_PROFILE', profile } as const),\r\n  setUserStatus: (status: string) => ({ type: 'SET_USER_STATUS', status } as const),\r\n  deletePost: (id: number) => ({ type: 'DELETE_POST', id } as const),\r\n  savePhotoSuccess: (photos: PhotosType) => ({ type: 'SAVE_PHOTO_SUCCESS', photos } as const),\r\n  updateNewPostTextCreator: (text: string) => ({ type: 'UPDATE-NEW-POST-TEXT', newText: text } as const)\r\n}\r\n\r\nexport const showProfileThunkCreator = (userId: number): ThunkType => async (dispatch) => {\r\n  let data = await profileAPI.showProfile(userId)\r\n  dispatch(actions.setUserProfile(data))\r\n}\r\n\r\nexport const getUserStatus = (userId: number): ThunkType => async (dispatch) => {\r\n  let data = await profileAPI.getStatus(userId)\r\n\r\n  dispatch(actions.setUserStatus(data))\r\n\r\n}\r\n\r\nexport const updateUserStatus = (status: string): ThunkType => async (dispatch) => {\r\n  try {\r\n    let data = await profileAPI.updateStatus(status)\r\n    if (data.resultCode === 0) {\r\n      dispatch(actions.setUserStatus(status))\r\n    }\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n  let data = await profileAPI.savePhoto(file)\r\n  if (data.resultCode === 0) {\r\n    dispatch(actions.savePhotoSuccess(data.data.photos))\r\n  }\r\n}\r\n\r\nexport const saveProfile = (profile: profileType): ThunkType => async (dispatch, getState) => {\r\n  const userId = getState().auth.userId\r\n  let data = await profileAPI.saveProfile(profile)\r\n  if (data.resultCode === 0) {\r\n    if (userId != null) {\r\n      dispatch(showProfileThunkCreator(userId))\r\n    } else {\r\n      throw new Error(\"userId can't be null\");\r\n    }\r\n  } else {\r\n    dispatch(stopSubmit('editProfile', ({ _error: data.messages[0] })))\r\n    return Promise.reject(data.messages[0])\r\n  }\r\n}\r\n\r\n\r\nexport default profileReducer\r\n\r\n// types\r\nexport type initialStateType = typeof initialState\r\ntype ActionsType = inferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","import { inferActionsTypes } from \"./redux-store\"\r\n\r\nlet initialState = {\r\n  dialogs: [\r\n    { id: 1, name: 'Dimych', avatarURL: 'https://upload.wikimedia.org/wikipedia/commons/9/9a/Gull_portrait_ca_usa.jpg' },\r\n    { id: 2, name: 'Lena', avatarURL: 'https://upload.wikimedia.org/wikipedia/commons/9/9a/Gull_portrait_ca_usa.jpg' },\r\n    { id: 3, name: 'Andrew', avatarURL: 'https://upload.wikimedia.org/wikipedia/commons/9/9a/Gull_portrait_ca_usa.jpg' },\r\n    { id: 4, name: 'Nastya', avatarURL: 'https://upload.wikimedia.org/wikipedia/commons/9/9a/Gull_portrait_ca_usa.jpg' },\r\n    { id: 5, name: 'Yana', avatarURL: 'https://upload.wikimedia.org/wikipedia/commons/9/9a/Gull_portrait_ca_usa.jpg' },\r\n    { id: 6, name: 'Diana', avatarURL: 'https://upload.wikimedia.org/wikipedia/commons/9/9a/Gull_portrait_ca_usa.jpg' },\r\n  ] as Array<dialogType>,\r\n  messages: [\r\n    { id: 1, message: 'Hey, how are you?' },\r\n    { id: 2, message: 'Good, how are you?' },\r\n    { id: 3, message: 'Unfortunately chatting is not available yet. Will be released in the future with socket.io' },\r\n  ] as Array<messageType>\r\n}\r\n\r\nexport const actions = {\r\n  addMessageCreator: (newMessageText: string) => ({ type: 'ADD-MESSAGE', newMessageText } as const)\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n\r\n  switch (action.type) {\r\n    case 'ADD-MESSAGE':\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, { id: 7, message: action.newMessageText }]\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default dialogsReducer\r\n\r\n// types \r\nexport type initialStateType = typeof initialState\r\ntype ActionsType = inferActionsTypes<typeof actions>\r\n\r\ntype dialogType = {\r\n  id: number\r\n  name: string\r\n  avatarURL: string // mozhet eto izbytochnoe\r\n}\r\n\r\ntype messageType = {\r\n  id: number\r\n  message: string\r\n}","export default __webpack_public_path__ + \"static/media/userPhoto.8c049e35.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"formControls_error__2klEN\"};","import { AnyRecord } from \"dns\"\r\n\r\nimport Axios from \"axios\"\r\nimport { userType } from \"../types/types\"\r\n\r\n\r\nexport const instance = Axios.create({\r\n  withCredentials: true,\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n  headers: {\r\n    'API-KEY': 'a25da4cd-7dea-4af1-9083-41bac44635bc'\r\n  }\r\n})\r\n\r\nexport enum ResultCodeEnum {\r\n  Success = 0,\r\n  Error = 1\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n  Success = 0,\r\n  CaptchaIsRequired = 10\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodeEnum> = {\r\n  data: D\r\n  messages: Array<string>\r\n  resultCode: RC\r\n}\r\n\r\nexport type GetItemsType = {\r\n  items: Array<userType>\r\n  totalCount: number\r\n  error: string | null\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nconst Settings = (props) => {\r\n  return (\r\n    <div>\r\n      Settings\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Settings","import React from 'react'\r\n\r\nconst News = (props) => {\r\n  return (\r\n    <div>\r\n      News\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default News","import React from 'react'\r\n\r\nconst Music = (props) => {\r\n  return (\r\n    <div>\r\n      Music\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Music","import { APIResponseType, instance } from \"./api\";\r\n\r\ntype GetCaptchaUrlType = {\r\n  url: string\r\n}\r\n\r\n\r\nexport const securityAPI = {\r\n  getCaptchaUrl() {\r\n    return instance.get<GetCaptchaUrlType>(`security/get-captcha-url`).then(response => response.data);\r\n  }\r\n};\r\n","import { instance, APIResponseType, ResultCodeEnum, ResultCodeForCaptchaEnum } from \"./api\";\r\n\r\nexport type authMeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type loginMeResponseDataType = {\r\n    userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n  authMe() {\r\n    return instance.get<APIResponseType<authMeResponseDataType>>(`auth/me`).then(response => response.data);\r\n  },\r\n  login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n    return instance.post<APIResponseType<loginMeResponseDataType, ResultCodeEnum | ResultCodeForCaptchaEnum>>(`auth/login`, { email, password, rememberMe, captcha }).then(response => response.data);\r\n  },\r\n  logout() {\r\n    return instance.delete(`auth/login`);\r\n  }\r\n};\r\n","import { FormAction, stopSubmit } from \"redux-form\"\r\nimport { ResultCodeEnum, ResultCodeForCaptchaEnum } from \"../api/api\"\r\nimport { securityAPI } from \"../api/securityAPI\"\r\nimport { authAPI } from \"../api/authAPI\"\r\nimport { BaseThunkType, inferActionsTypes } from \"./redux-store\"\r\n\r\n\r\nlet initialState = {\r\n  userId: null as number | null,\r\n  email: null as string | null,\r\n  login: null as string | null,\r\n  isAuth: false,\r\n  captchaUrl: null as string | null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n  switch (action.type) {\r\n    case 'SET_USER_DATA':\r\n      return {\r\n        ...state,\r\n        ...action.data\r\n      }\r\n    case 'GET_CAPTCHA_URL_SUCCESS':\r\n      return {\r\n        ...state,\r\n        captchaUrl: action.captchaUrl\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const actions = {\r\n  setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => (\r\n    { type: 'SET_USER_DATA', data: { email, userId, login, isAuth } } as const),\r\n  getCaptchaUrlSuccess: (url: string) => ({ type: 'GET_CAPTCHA_URL_SUCCESS', captchaUrl: url } as const)\r\n}\r\n\r\nexport const authMeThunkCreator = (): ThunkType => async (dispatch) => {\r\n\r\n  let data = await authAPI.authMe()\r\n\r\n  if (data.resultCode === ResultCodeEnum.Success) {\r\n    let { id, login, email } = data.data\r\n    dispatch(actions.setAuthUserData(id, login, email, true))\r\n  }\r\n}\r\n\r\nexport const loginThunkCreator = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n\r\n  let data = await authAPI.login(email, password, rememberMe, captcha)\r\n\r\n  if (data.resultCode === ResultCodeEnum.Success) {\r\n    dispatch(authMeThunkCreator())\r\n  } else {\r\n    // below must be used '===' but I don't really know why TS always alert an error\r\n    if (data.resultCode >= ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n      dispatch(getCaptchaUrl())\r\n    } else {\r\n      let messages = data.messages.length > 0 ? data.messages[0] : 'Some error'\r\n      dispatch(stopSubmit('login', ({ _error: messages })))\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport const logoutThunkCreator = (): ThunkType => async (dispatch) => {\r\n  let response = await authAPI.logout()\r\n\r\n  if (response.data.resultCode === ResultCodeEnum.Success) {\r\n    dispatch(actions.setAuthUserData(null, null, null, false))\r\n  }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n\r\n  const data = await securityAPI.getCaptchaUrl()\r\n  const captchaUrl = data.url\r\n  dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport default authReducer\r\n\r\n// types\r\n\r\nexport type initialStateType = typeof initialState\r\ntype ActionsType = inferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { required } from '../../utils/validation/validators'\r\nimport { formControl } from '../common/FormControls/formControls'\r\nimport { loginThunkCreator } from '../../redux/Auth_reducer'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { appStateType } from '../../redux/redux-store'\r\n\r\n\r\nconst Input = formControl('input')\r\n\r\n\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<loginFormValuesType, loginFormOwnProps> & loginFormOwnProps> = (props) => {\r\n  return (\r\n\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field placeholder='Email' type=\"text\" name={'email'} component={Input} validate={required} />\r\n      </div>\r\n      <div>\r\n        <Field placeholder='Password' type=\"password\" name={'password'} component={Input} validate={required} />\r\n      </div>\r\n      <div>\r\n        <Field type=\"checkbox\" name={'rememberMe'} component={'input'} /> Remember me\r\n      </div>\r\n\r\n      { props.captchaUrl && <img src={props.captchaUrl} />}\r\n      { props.captchaUrl && <Field placeholder='Symbols from image' name={'captcha'} component={Input} validate={required} />}\r\n\r\n      {props.error\r\n        ? <div className='formSummaryError'> {props.error} </div>\r\n        : null}\r\n\r\n      <div>\r\n        <button>Login</button>\r\n      </div>\r\n    </form>\r\n\r\n  )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<loginFormValuesType, loginFormOwnProps>({\r\n  form: 'login'\r\n})(LoginForm)\r\n\r\n\r\nexport const LoginPage: React.FC = () => {\r\n  const dispatch = useDispatch()\r\n\r\n  const captchaUrl = useSelector( (state: appStateType) => state.auth.captchaUrl )\r\n  const isAuth = useSelector( (state: appStateType) => state.auth.isAuth )\r\n  \r\n  if (isAuth) {\r\n    return <Redirect to={'/profile'} />\r\n  }\r\n\r\n  const onSubmit = (formData: loginFormValuesType) => {\r\n    dispatch(loginThunkCreator(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Login</h1>\r\n      <LoginReduxForm captchaUrl={captchaUrl} onSubmit={onSubmit} />\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n// types\r\ntype loginFormOwnProps = {\r\n  captchaUrl: string | null\r\n}\r\ntype loginFormValuesType = {\r\n  email: string\r\n  password: string\r\n  captcha: string\r\n  rememberMe: boolean\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { authMeThunkCreator } from \"./Auth_reducer\"\r\nimport { inferActionsTypes } from \"./redux-store\"\r\n\r\nlet initialState = {\r\n  initialised: false\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\ntype ActionsType = inferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: any): initialStateType => {\r\n  switch (action.type) {\r\n    case 'INITIALISED_SUCCESS':\r\n\r\n\r\n      return {\r\n        ...state,\r\n        initialised: true\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst actions = {\r\n  initialisedSuccess: () => ({ type: 'INITIALISED_SUCCESS' } as const)\r\n}\r\n\r\nexport const initialisedSuccess = () => ({ type: 'INITIALISED_SUCCESS' })\r\n\r\nexport const initialiseApp = () => {\r\n  return (dispatch: any) => {\r\n    let dispatchResult = dispatch(authMeThunkCreator())\r\n    Promise.all([dispatchResult])\r\n      .then(() => {\r\n        (dispatch(actions.initialisedSuccess()))\r\n      })\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport default appReducer","\r\n\r\nlet initialState = {\r\n  friends: [\r\n    { id: 1, name: 'Dimych', avatarURL: 'https://upload.wikimedia.org/wikipedia/commons/9/9a/Gull_portrait_ca_usa.jpg' },\r\n    { id: 2, name: 'Lena', avatarURL: 'https://upload.wikimedia.org/wikipedia/commons/9/9a/Gull_portrait_ca_usa.jpg' },\r\n    { id: 3, name: 'Andrew', avatarURL: 'https://upload.wikimedia.org/wikipedia/commons/9/9a/Gull_portrait_ca_usa.jpg' },\r\n    { id: 4, name: 'Nastya', avatarURL: 'https://upload.wikimedia.org/wikipedia/commons/9/9a/Gull_portrait_ca_usa.jpg' },\r\n    { id: 5, name: 'Yana', avatarURL: 'https://upload.wikimedia.org/wikipedia/commons/9/9a/Gull_portrait_ca_usa.jpg' },\r\n    { id: 6, name: 'Diana', avatarURL: 'https://upload.wikimedia.org/wikipedia/commons/9/9a/Gull_portrait_ca_usa.jpg' },\r\n  ]\r\n}\r\n\r\ntype initialStateType = typeof initialState\r\n\r\n\r\nconst sidebarReducer = (state = initialState, action: any): initialStateType => {\r\n\r\n\r\n\r\n  return state\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default sidebarReducer","import { instance, GetItemsType, APIResponseType } from \"./api\";\r\n\r\n\r\nexport const usersAPI = {\r\n  getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\r\n    return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`)).then(response => response.data)\r\n  },\r\n  unfollow(userId: number) {\r\n    return instance.delete<APIResponseType>(`follow/${userId}`).then(response => response.data)\r\n  },\r\n  follow(userId: number) {\r\n    return instance.post(`follow/${userId}`).then(response => response.data) as Promise<APIResponseType> \r\n  }\r\n};\r\n","import { Dispatch } from \"react\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { APIResponseType } from \"../api/api\"\r\nimport { usersAPI } from \"../api/usersAPI\"\r\nimport { userType } from \"../types/types\"\r\nimport { appStateType, BaseThunkType, inferActionsTypes } from \"./redux-store\"\r\n\r\nlet initialState = {\r\n  users: [] as Array<userType>,\r\n  pageSize: 10,\r\n  totalUsersCount: 21,\r\n  currentPage: 1,\r\n  isFetching: false,\r\n  followinInProgress: [] as Array<number>, // array of users ids\r\n  filter: {\r\n    term: '',\r\n    friend: null as null | boolean\r\n  }\r\n}\r\n\r\n\r\nexport const usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n  switch (action.type) {\r\n    case \"FOLLOW\":\r\n\r\n      return {\r\n        ...state,\r\n        users: state.users.map(u => u.id === action.userId ? { ...u, followed: true } : u)\r\n      }\r\n\r\n    case \"UNFOLLOW\": {\r\n      return {\r\n        ...state,\r\n        users: state.users.map(u => u.id === action.userId ? { ...u, followed: false } : u)\r\n      }\r\n    }\r\n    case \"SET_USERS\": {\r\n      return { ...state, users: action.users }\r\n    }\r\n    case \"SET_CURRENT_PAGE\": {\r\n      return { ...state, currentPage: action.currentPage }\r\n    }\r\n    case \"SET_FILTER\": {\r\n      return { ...state, filter: action.payload }\r\n    }\r\n    case \"SET_TOTAL_USERS_COUNT\": {\r\n      return { ...state, totalUsersCount: action.count }\r\n    }\r\n    case \"TOGGLE_IS_FETCHING\": {\r\n      return { ...state, isFetching: action.isFetching }\r\n    }\r\n    case \"TOGGLE_IS_FOLLOWING_PROGRESS\": {\r\n      return {\r\n        ...state,\r\n        followinInProgress: action.isFetching\r\n          ? [...state.followinInProgress, action.userId]\r\n          : state.followinInProgress.filter(id => id != action.userId)\r\n      }\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n\r\n\r\nexport const actions = {\r\n  followSuccess: (userId: number) => ({ type: 'FOLLOW', userId } as const),\r\n  unfollowSuccess: (userId: number) => ({ type: 'UNFOLLOW', userId } as const),\r\n  setUsers: (users: Array<userType>) => ({ type: 'SET_USERS', users } as const),\r\n  setCurrentPage: (currentPage: number) => ({ type: 'SET_CURRENT_PAGE', currentPage } as const),\r\n  setFilter: (filter: FilterType) => ({ type: 'SET_FILTER', payload: filter } as const),\r\n  setTotalUsersCount: (totalCount: number) => ({ type: 'SET_TOTAL_USERS_COUNT', count: totalCount } as const),\r\n  toggleIsFetching: (isFetching: boolean) => ({ type: 'TOGGLE_IS_FETCHING', isFetching } as const),\r\n  toggleIsFollowingProgress: (isFetching: boolean, userId: number) => ({ type: 'TOGGLE_IS_FOLLOWING_PROGRESS', isFetching, userId } as const)\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number, filter: FilterType): ThunkType =>\r\n  async (dispatch) => {\r\n\r\n    dispatch(actions.toggleIsFetching(true))\r\n    dispatch(actions.setCurrentPage(currentPage))\r\n    dispatch(actions.setFilter(filter))\r\n\r\n    let data = await usersAPI.getUsers(currentPage, pageSize, filter.term, filter.friend)\r\n\r\n    dispatch(actions.toggleIsFetching(false))\r\n    dispatch(actions.setUsers(data.items))\r\n    dispatch(actions.setTotalUsersCount(data.totalCount))\r\n\r\n  }\r\n\r\nexport const _followUnfollowFlow = async (userId: number,\r\n  dispatch: Dispatch<ActionsType>,\r\n  apiMethod: (userId: number) => Promise<APIResponseType>,\r\n  actionCreator: (userId: number) => ActionsType) => {\r\n\r\n  dispatch(actions.toggleIsFollowingProgress(true, userId))\r\n\r\n  let response = await apiMethod(userId)\r\n  if (response.resultCode == 0) {\r\n    dispatch(actionCreator(userId))\r\n  }\r\n  dispatch(actions.toggleIsFollowingProgress(false, userId))\r\n}\r\n\r\n\r\n\r\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\r\n  let apiMethod = usersAPI.follow.bind(usersAPI)\r\n  let actionCreator = actions.followSuccess\r\n\r\n  await _followUnfollowFlow(userId, dispatch, apiMethod, actionCreator)\r\n}\r\n\r\n\r\nexport const unfollow = (userId: number): ThunkType => async (dispatch) => {\r\n  let apiMethod = usersAPI.unfollow.bind(usersAPI)\r\n  let actionCreator = actions.unfollowSuccess\r\n\r\n  await _followUnfollowFlow(userId, dispatch, apiMethod, actionCreator)\r\n}\r\n\r\n\r\nexport default usersReducer\r\n\r\n// types\r\nexport type InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ThunkType = BaseThunkType<ActionsType>\r\ntype ActionsType = inferActionsTypes<typeof actions>\r\n","import { Action, applyMiddleware, combineReducers, compose, createStore } from \"redux\";\r\nimport authReducer from \"./Auth_reducer\";\r\nimport dialogsReducer from \"./Dialogs_reducer\";\r\nimport profileReducer from \"./Profile_reducer\";\r\nimport sidebarReducer from \"./Sidebar_reducer\";\r\nimport usersReducer from \"./Users_reducer\";\r\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk'\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from \"./App_reducer\";\r\n\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n  profilePage: profileReducer,\r\n  dialogsPage: dialogsReducer,\r\n  sidebar: sidebarReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  form: formReducer,\r\n  app: appReducer\r\n})\r\n\r\ntype rootReducerType = typeof rootReducer\r\nexport type appStateType = ReturnType<rootReducerType>\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport type inferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never \r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, appStateType, unknown, A>\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(\r\n  applyMiddleware(thunkMiddleware)\r\n));\r\n\r\n// let store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\n\r\nexport default store","import Axios from 'axios'\r\nimport React from 'react'\r\nimport s from './Users.module.css'\r\nimport userPhoto from '../../assets/images/userPhoto.png'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { usersAPI } from \"../../api/usersAPI\"\r\nimport Paginatior from '../common/Paginator/Paginator'\r\nimport { userType } from '../../types/types'\r\n\r\ntype PropsType = {\r\n  user: userType\r\n  followingInProgress: Array<number>\r\n  follow: (userId: number) => void\r\n  unfollow: (userId: number) => void\r\n}\r\n\r\nconst User: React.FC<PropsType> = ({ user, ...props }) => {\r\n\r\n  return <div style={{ width: 400, display: 'flex', justifyContent: \"space-between\", }}>\r\n    <div style={{ textAlign: \"center\" }}>\r\n      <div style={{ padding: 10 }}>\r\n        <NavLink to={'/profile/' + user.id}>\r\n          <img style={{ width: 130, height: 130, borderRadius: 65 }} src={user.photos.small != null ? user.photos.small : userPhoto} alt=\"avatar\" />\r\n        </NavLink>\r\n      </div>\r\n      <div>\r\n        {user.followed\r\n          ? <button disabled={props.followingInProgress.some(id => id === user.id)} onClick={() => { props.unfollow(user.id) }}>unfollow</button>\r\n          : <button disabled={props.followingInProgress.some(id => id === user.id)} onClick={() => { props.follow(user.id) }}>follow</button>}\r\n      </div>\r\n    </div>\r\n    <div style={{ width: 200, textAlign: 'start', display: \"flex\", justifyContent: \"start\", marginTop: 40, color: \"white\" }}>\r\n      <span>\r\n        <div>Name: {user.name}</div>\r\n        {\r\n          user.status ? <div>Status: {user.status}</div> : <div>User status is empty</div>\r\n        }\r\n      </span>\r\n      <span>\r\n        {/* <div>{'user.location.city'}</div>\r\n        <div>{'user.location.country'}</div> */}\r\n      </span>\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default User\r\n\r\n","import React from 'react'\r\nimport { appStateType } from './redux-store'\r\n\r\nexport const getUsersSel = (state: appStateType) => {\r\n  return state.usersPage.users\r\n}\r\n\r\nexport const getPageSize = (state: appStateType) => {\r\n  return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: appStateType) => {\r\n  return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: appStateType) => {\r\n  return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: appStateType) => {\r\n  return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: appStateType) => {\r\n  return state.usersPage.followinInProgress\r\n}\r\n\r\nexport const getUsersFilter = (state: appStateType) => {\r\n  return state.usersPage.filter\r\n}","import { Field, Form, Formik } from 'formik'\r\nimport React from 'react';\r\nimport { FilterType } from '../../redux/Users_reducer';\r\nimport { useSelector } from 'react-redux';\r\nimport { getUsersFilter } from './../../redux/Users_selectors';\r\nimport {\r\n  SearchOutlined\r\n} from '@ant-design/icons';\r\n\r\nconst userSearchFormValidate = (values) => {\r\n  const errors = {};\r\n  return errors;\r\n}\r\n\r\n\r\ntype FormType = {\r\n  term: string\r\n  friend: 'true' | 'false' | 'null'\r\n}\r\n\r\ntype PropsType = {\r\n  onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\r\n\r\n  const filter = useSelector(getUsersFilter)\r\n\r\n  const submit = (values: FormType, { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n\r\n    const filter: FilterType = {\r\n      term: values.term,\r\n      friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\r\n    }\r\n\r\n    props.onFilterChanged(filter)\r\n    setSubmitting(false)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Formik\r\n        enableReinitialize={true}\r\n        initialValues={{ term: filter.term, friend: String(filter.friend) as 'true' | 'false' | 'null' }}\r\n        validate={userSearchFormValidate}\r\n        onSubmit={submit}\r\n      >\r\n        {({ values, isSubmitting }) => (\r\n          <Form style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n            <Field title={'Search by username'} type=\"text\" name=\"term\" style={{ margin: 10 }} />\r\n            <Field name=\"friend\" as=\"select\" style={{ margin: 10 }}>\r\n              <option value=\"null\">All</option>\r\n              <option value=\"true\">Only followed</option>\r\n              <option value=\"false\">Only unfollowed</option>\r\n            </Field >\r\n            <button type=\"submit\" disabled={isSubmitting}>\r\n              <SearchOutlined /> Find\r\n           </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  )\r\n})","import React, { useEffect, useState } from 'react'\r\nimport Paginatior from '../common/Paginator/Paginator'\r\nimport User from './User'\r\nimport { userType } from '../../types/types'\r\nimport { UsersSearchForm } from './UserSearchForm';\r\nimport { FilterType, getUsers, unfollow, follow } from '../../redux/Users_reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getCurrentPage, getFollowingInProgress, getPageSize, getTotalUsersCount } from '../../redux/Users_selectors';\r\nimport { getUsersFilter, getUsersSel } from './../../redux/Users_selectors';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport queryString from 'query-string'\r\nimport { Pagination } from 'antd';\r\n\r\n\r\ntype propsType = {}\r\n\r\ntype QueryParamsType = {\r\n  term?: string\r\n  page?: string\r\n  friend?: string\r\n}\r\n\r\n\r\nconst Users: React.FC<propsType> = () => {\r\n\r\n  const history = useHistory()\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const users = useSelector(getUsersSel)\r\n  const totalUsersCount = useSelector(getTotalUsersCount)\r\n  const currentPage = useSelector(getCurrentPage)\r\n  const pageSize = useSelector(getPageSize)\r\n  const filter = useSelector(getUsersFilter)\r\n  const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    const parsed = queryString.parse(history.location.search) as QueryParamsType\r\n\r\n    let actualPage = currentPage\r\n    let actualFilter = filter\r\n    if (parsed.page) actualPage = Number(parsed.page)\r\n    if (parsed.term) actualFilter = { ...actualFilter, term: parsed.term as string }\r\n    if (parsed.friend) actualFilter = { ...actualFilter, friend: parsed.friend === 'null' ? null : parsed.friend === 'true' ? true : false }\r\n    dispatch(getUsers(actualPage, pageSize, actualFilter))\r\n  }, [])\r\n\r\n  // TODO: fix returning class active for first page when filtering\r\n  useEffect(() => {\r\n    history.push({\r\n      pathname: '/users',\r\n      search: `?term=${filter.term}&friend=${filter.friend}&page=${currentPage}`\r\n    })\r\n  }, [filter, currentPage])\r\n\r\n  const onPageChanged = (page: number, pageSize: number = 5) => {\r\n    dispatch(getUsers((page + 1), pageSize, filter))\r\n  }\r\n  const onFilterChanged = (filter: FilterType) => {\r\n\r\n    dispatch(getUsers(1, pageSize, filter))\r\n\r\n  }\r\n  const followUser = (userId: number) => {\r\n    dispatch(follow(userId))\r\n  }\r\n  const unfollowUser = (userId: number) => {\r\n    dispatch(unfollow(userId))\r\n  }\r\n\r\n\r\n  return <div style={{ padding: 50 }}>\r\n    <div style={{ display: 'flex', justifyContent: \"space-between\", margin: 10 }} >\r\n      <Pagination showQuickJumper defaultCurrent={1} total={totalUsersCount} onChange={onPageChanged} />\r\n      <UsersSearchForm onFilterChanged={onFilterChanged} />\r\n    </div>\r\n    <div>\r\n      {\r\n        users.map(u => <User key={u.id} user={u} followingInProgress={followingInProgress} unfollow={unfollowUser} follow={followUser} />\r\n        )}\r\n    </div>\r\n    {/* <Paginatior totalUsersCount={totalUsersCount} pageSize={pageSize} onPageChanged={onPageChanged} currentPage={currentPage} /> */}\r\n\r\n\r\n  </div>\r\n}\r\n\r\nexport default Users\r\n\r\n","import React from 'react'\r\nimport { connect, useSelector } from 'react-redux'\r\nimport { follow, unfollow, getUsers, FilterType } from '../../redux/Users_reducer'\r\nimport Users from './Users'\r\nimport Preloader from '../common/preloader/preloader'\r\nimport { compose } from 'redux'\r\nimport { getUsersSel, getPageSize, getTotalUsersCount, getCurrentPage, getIsFetching, getFollowingInProgress } from '../../redux/Users_selectors'\r\nimport { userType } from '../../types/types'\r\nimport { appStateType } from '../../redux/redux-store'\r\nimport { getUsersFilter } from './../../redux/Users_selectors';\r\n\r\n\r\ntype UserPagePropsType = {\r\n  pageTitle: string\r\n}\r\nexport const UsersPage: React.FC<UserPagePropsType> = (props) => {\r\n\r\n  const isFetching = useSelector(getIsFetching)\r\n\r\n  return <>\r\n      {isFetching\r\n        ? <Preloader />\r\n        : null}\r\n      <Users />\r\n    </>\r\n} \r\n","import React from 'react'\r\nimport { appStateType } from './redux-store'\r\n\r\nexport const SelectIsAuth = (state: appStateType) => {\r\n  return state.auth.isAuth\r\n}\r\n\r\nexport const SelectCurrentUserLogin = (state: appStateType) => {\r\n  return state.auth.login\r\n}","import React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport s from './Header.module.css'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { SelectCurrentUserLogin, SelectIsAuth } from './../../redux/Auth_selectors';\r\nimport { logoutThunkCreator } from '../../redux/Auth_reducer';\r\nimport { Button, Col, Layout, Row } from 'antd';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport Avatar from 'antd/lib/avatar/avatar';\r\n\r\nexport type MapPropsType = {}\r\n\r\n\r\nexport const Header: React.FC<MapPropsType> = () => {\r\n\r\n  const { Header } = Layout;\r\n\r\n  const isAuth = useSelector(SelectIsAuth)\r\n  const login = useSelector(SelectCurrentUserLogin)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const logoutCallback = () => {\r\n    dispatch(logoutThunkCreator())\r\n  }\r\n  return (<Header className=\"site-layout-sub-header-background\" style={{ padding: 0 }}>\r\n    <Row>\r\n      <Col span={19}></Col>\r\n      {isAuth\r\n        ? <>\r\n          <Col span={1}>\r\n            <Link to='/profile'><Avatar style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />} /></Link>\r\n          </Col>\r\n          <Col span={4}>\r\n            <div style={{ color: '#fff' }}>{login} <Button style={{ marginLeft: 10 }} onClick={logoutCallback}>Log out</Button> </div>\r\n          </Col>\r\n        </>\r\n        : <Col span={5}>\r\n          <div><Button style={{ marginRight: 15 }}><Link to='/login'>Login</Link></Button>\r\n            <Button><a target=\"_blank\" href=\"https://social-network.samuraijs.com/signUp\">Create an account</a></Button>\r\n          </div>\r\n        </Col>}\r\n\r\n    </Row>\r\n  </Header >\r\n  )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.e7c70288.png\";","import React, { Suspense } from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport { BrowserRouter, Redirect, Route, withRouter, NavLink } from 'react-router-dom';\r\nimport Settings from './components/Settings/Settings';\r\nimport News from './components/News/News';\r\nimport Music from './components/Music/Music';\r\nimport { LoginPage } from './components/login/login';\r\nimport { connect, Provider } from 'react-redux';\r\nimport { initialiseApp } from './redux/App_reducer'\r\nimport { compose } from 'redux';\r\nimport Preloader from './components/common/preloader/preloader';\r\nimport store, { appStateType } from './redux/redux-store';\r\nimport { UsersPage } from './components/Users/UsersContainer';\r\nimport 'antd/dist/antd.css';\r\nimport { Col, Layout, Menu, Row } from 'antd';\r\nimport { UploadOutlined, UserOutlined, MessageOutlined } from '@ant-design/icons';\r\nimport Avatar from 'antd/lib/avatar/avatar';\r\nimport { Header } from './components/Header/Header'\r\nimport logo from './assets/images/logo.png'\r\n\r\nconst { Content, Footer, Sider } = Layout;\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n  initialiseApp: () => void\r\n}\r\n\r\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\r\n\r\n  componentDidMount() {\r\n    this.props.initialiseApp()\r\n    window.addEventListener(\"error\", function (e) {\r\n      console.log(\"Error occurred: \" + e.error.message);\r\n      return false;\r\n    })\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"error\", function (e) {\r\n      console.log(\"Error occurred: \" + e.error.message);\r\n      return false;\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    if (!this.props.initialised) {\r\n      return <Preloader />\r\n    }\r\n\r\n\r\n    return (\r\n\r\n      <Layout>\r\n        <Sider\r\n          breakpoint=\"lg\"\r\n          collapsedWidth=\"0\"\r\n          onBreakpoint={broken => {\r\n            console.log(broken);\r\n          }}\r\n          onCollapse={(collapsed, type) => {\r\n            console.log(collapsed, type);\r\n          }}\r\n        >\r\n\r\n          <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['4']}>\r\n            <Menu.Item key=\"logo\" style={{ height: 100 }}>\r\n              <NavLink to=\"/profile\" activeClassName={'activeLink'}><div ><img style={{ height: 125, objectFit: \"contain\" }} src={logo} /></div> </NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"1\" icon={<UserOutlined />}>\r\n              <NavLink to=\"/profile\" activeClassName={'activeLink'}>Profile</NavLink>\r\n\r\n            </Menu.Item>\r\n            <Menu.Item key=\"2\" icon={<MessageOutlined />}>\r\n              <NavLink to=\"/dialogs\" activeClassName={'activeLink'}>Messages</NavLink>\r\n\r\n            </Menu.Item>\r\n            <Menu.Item key=\"3\" icon={<UploadOutlined />}>\r\n              <NavLink to=\"/users\" activeClassName={'activeLink'}>Users</NavLink>\r\n\r\n            </Menu.Item>\r\n\r\n          </Menu>\r\n\r\n\r\n\r\n\r\n        </Sider>\r\n        <Layout>\r\n          <Header />\r\n          <Content style={{ margin: '24px 16px 0' }}>\r\n            <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\r\n\r\n              <Suspense fallback={<div>Loading...</div>}>\r\n                <div className='app-wrapper-content'>\r\n                  <Route exact path='/' render={() => <Redirect to='/profile' />} />\r\n                  <Route path='/login' render={() => <LoginPage />} />\r\n                  <Route path='/profile/:userId?' render={() => <ProfileContainer />} />\r\n                  <Route path='/dialogs' render={() => <DialogsContainer />} />\r\n                  <Route path='/users' render={() => <UsersPage pageTitle={'Users'} />} />\r\n                  <Route path='/news' render={News} />\r\n                  <Route path='/music' render={Music} />\r\n                  <Route path='/settings' render={Settings} />\r\n                  {/* <Route path='*' render={() => <div>404 NOT FOUND </div>} /> */}\r\n                </div>\r\n              </Suspense>\r\n\r\n            </div>\r\n          </Content>\r\n          <Footer style={{ textAlign: 'center' }}>©2020 Created by Nazar Pidhirnyi</Footer>\r\n        </Layout>\r\n      </Layout>\r\n\r\n\r\n      // <div className='app-wrapper'>\r\n      //   <HeaderContainer />\r\n      //   <Navbar />\r\n      //   <Suspense fallback={<div>Loading...</div>}>\r\n      //     <div className='app-wrapper-content'>\r\n      //       <Route exact path='/' render={() => <Redirect to='/profile' />} />\r\n      //       <Route path='/login' render={() => <LoginPage />} />\r\n      //       <Route path='/profile/:userId?' render={() => <ProfileContainer />} />\r\n      //       <Route path='/dialogs' render={() => <DialogsContainer />} />\r\n      //       <Route path='/users' render={() => <UsersPage pageTitle={'Users'} />} />\r\n      //       <Route path='/news' render={News} />\r\n      //       <Route path='/music' render={Music} />\r\n      //       <Route path='/settings' render={Settings} />\r\n      //       {/* <Route path='*' render={() => <div>404 NOT FOUND </div>} /> */}\r\n      //     </div>\r\n      //   </Suspense>\r\n      // </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: appStateType) => ({\r\n  initialised: state.app.initialised\r\n})\r\n\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n  withRouter,\r\n  connect(mapStateToProps, { initialiseApp }))(App)\r\n\r\nlet MainApp: React.FC = () => {\r\n  return <BrowserRouter>\r\n    <Provider store={store} >\r\n      <AppContainer />\r\n    </Provider>\r\n  </BrowserRouter>\r\n}\r\n\r\nexport default MainApp","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './redux/redux-store';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport MainApp from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <MainApp />,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}