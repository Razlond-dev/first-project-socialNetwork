{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirectComponent","WrappedComponent","connect","props","restProps","to","DialogItem","className","s","dialog","active","id","name","Message","message","Textarea","formControl","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","style","color","component","validate","required","placeholder","onClick","Dialogs","dialogsElements","dialogsPage","dialogs","map","dia","key","messagesElements","messages","mes","dialogsItems","values","addMessageCreator","newMessageText","compose","actions"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,gHCI/MC,EAA6B,SAACC,GAChC,MAAO,CACLC,OAAQD,EAAME,KAAKD,SAKhB,SAASE,EAAgCC,GAQ9C,OADiCC,YAA4DN,EAA5DM,EANqC,SAACC,GAAW,IAC3EL,EAAwBK,EAAxBL,OAAWM,EAD+D,YAClDD,EADkD,YAE/E,OAAKL,EAEI,kBAACG,EAAqBG,GAFX,kBAAC,IAAD,CAAUC,GAAI,e,oJCAvBC,EANyB,SAACH,GACvC,OAAO,yBAAKI,UAAS,UAAKC,IAAEC,OAAP,YAAiBD,IAAEE,SACtC,kBAAC,IAAD,CAASL,GAAI,YAAcF,EAAMQ,IAAKR,EAAMS,QCCjCC,EAJsB,SAACV,GACpC,OAAO,yBAAKI,UAAWC,IAAEM,SAAUX,EAAMW,UCGrCC,EAAWC,YAAY,YASvBC,EAAsBC,YAA4D,CACtFC,KAAM,yBADoBD,EAPmG,SAACf,GAC9H,OAAQ,0BAAMiB,SAAUjB,EAAMkB,cAC5B,kBAACC,EAAA,EAAD,CAAOC,MAAO,CAAEC,MAAO,QAAUC,UAAWV,EAAUW,SAAUC,IAAUf,KAAM,iBAAkBgB,YAAY,iBAC9G,kBAAC,IAAD,CAAQC,QAAS1B,EAAMkB,cAAvB,mBAkCWS,EAxByB,SAAC3B,GAEvC,IAAI4B,EAAkB5B,EAAM6B,YAAYC,QAAQC,KAAI,SAAAC,GAAG,OAAI,kBAAC,EAAD,CAAYvB,KAAMuB,EAAIvB,KAAMwB,IAAKD,EAAIxB,GAAIA,GAAIwB,EAAIxB,QACxG0B,EAAmBlC,EAAM6B,YAAYM,SAASJ,KAAI,SAAAK,GAAG,OAAI,kBAAC,EAAD,CAASzB,QAASyB,EAAIzB,QAASsB,IAAKG,EAAI5B,QAMrG,OACE,yBAAKJ,UAAWC,IAAEyB,SAChB,yBAAK1B,UAAWC,IAAEgC,aAAcjB,MAAO,CAAEC,MAAO,UAC7CO,GAGH,yBAAKxB,UAAWC,IAAE8B,UAChB,6BACGD,GAEH,kBAACpB,EAAD,CAAqBG,SAdV,SAACqB,GAChBtC,EAAMuC,kBAAkBD,EAAOE,sB,iBCjBpBC,sBACb1C,aAPoB,SAACL,GACrB,MAAO,CACLmC,YAAanC,EAAMmC,eAKI,CACvBU,kBAAmBG,IAAQH,oBAE7B1C,IAJa4C,CAKbd","file":"static/js/4.af0f2d2d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2ymWN\",\"dialogsItems\":\"Dialogs_dialogsItems__31yjt\",\"active\":\"Dialogs_active__3SK3v\",\"dialog\":\"Dialogs_dialog__TM84-\",\"messages\":\"Dialogs_messages__3Sx6y\",\"message\":\"Dialogs_message__3W_IS\"};","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { appStateType } from '../redux/redux-store'\r\n\r\nlet mapStateToPropsForRedirect = (state: appStateType) => {\r\n  return {\r\n    isAuth: state.auth.isAuth\r\n  }\r\n}\r\n\r\n\r\nexport function withAuthRedirectComponent<WCP> (WrappedComponent: React.ComponentType<WCP>) {\r\n  const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    let {isAuth, ...restProps} = props\r\n    if (!isAuth) return <Redirect to={'login'} />\r\n    \r\n      return <WrappedComponent {...restProps as WCP} />\r\n  }\r\n  let ConnectedRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, appStateType>(mapStateToPropsForRedirect)(RedirectComponent)\r\n  return ConnectedRedirectComponent\r\n}\r\n\r\n// types\r\ntype MapPropsType = {\r\n  isAuth: boolean\r\n}\r\n\r\ntype DispatchPropsType = {}","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype PropsType = {\r\n  id: number\r\n  name: string\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n  return <div className={`${s.dialog} ${s.active}`}>\r\n    <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n  </div>\r\n}\r\n\r\nexport default DialogItem","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype PropsType = {\r\n  message: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n  return <div className={s.message}>{props.message}</div>\r\n}\r\n\r\nexport default Message","import { Button } from 'antd'\r\nimport TextArea from 'antd/lib/input/TextArea'\r\nimport React from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { initialStateType } from '../../redux/Dialogs_reducer'\r\nimport { maxLengthCreator, required } from '../../utils/validation/validators'\r\nimport { formControl } from '../common/FormControls/formControls'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport s from './Dialogs.module.css'\r\nimport Message from './Message/Message'\r\n\r\nconst Textarea = formControl('textarea')\r\n\r\nconst addMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, NewMessageFormOwnProps> & NewMessageFormOwnProps> = (props) => {\r\n  return (<form onSubmit={props.handleSubmit}>\r\n    <Field style={{ color: '#000' }} component={Textarea} validate={required} name={'newMessageText'} placeholder='Send message' />\r\n    <Button onClick={props.handleSubmit}>Add message</Button>\r\n  </form>)\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<NewMessageFormValuesType, NewMessageFormOwnProps>({\r\n  form: 'dialogsAddMessageForm'\r\n})(addMessageForm)\r\n\r\n\r\n\r\nconst Dialogs: React.FC<OwnPropsType> = (props) => {\r\n\r\n  let dialogsElements = props.dialogsPage.dialogs.map(dia => <DialogItem name={dia.name} key={dia.id} id={dia.id} />)\r\n  let messagesElements = props.dialogsPage.messages.map(mes => <Message message={mes.message} key={mes.id} />)\r\n\r\n  let addMessage = (values: NewMessageFormValuesType) => {\r\n    props.addMessageCreator(values.newMessageText)\r\n  }\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems} style={{ color: 'black' }}>\r\n        {dialogsElements}\r\n      </div>\r\n\r\n      <div className={s.messages}>\r\n        <div>\r\n          {messagesElements}\r\n        </div>\r\n        <AddMessageFormRedux onSubmit={addMessage} />\r\n      </div>\r\n    </div>)\r\n}\r\n\r\nexport default Dialogs\r\n\r\n// types\r\ntype OwnPropsType = {\r\n  dialogsPage: initialStateType\r\n  addMessageCreator: (newMessageText: string) => void\r\n}\r\ntype NewMessageFormValuesType = {\r\n  newMessageText: string\r\n}\r\ntype NewMessageFormOwnProps = {}","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { actions } from '../../redux/Dialogs_reducer'\r\nimport Dialogs from './Dialogs'\r\nimport { withAuthRedirectComponent } from '../../hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\nimport { appStateType } from '../../redux/redux-store'\r\n\r\n\r\nlet mapStateToProps = (state: appStateType) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage\r\n  }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, {\r\n    addMessageCreator: actions.addMessageCreator\r\n  }),\r\n  withAuthRedirectComponent\r\n)(Dialogs)"],"sourceRoot":""}